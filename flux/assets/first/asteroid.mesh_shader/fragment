#version 420 core

in vec3 vPos;
in vec2 vTex;
in vec3 vNorm;

out vec4 fCol;

struct Material{
    vec3 ambient;
    sampler2D diffuse;
    vec3 specular;
    float shininess;
};

struct DirectionalLight{
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight{
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

vec3 cast_light(Material material, DirectionalLight light){
    vec3 ambient = vec3(1,1,1) * light.ambient;

    vec3 diffuse = light.diffuse * texture(material.diffuse, vTex).xyz;
    diffuse *= dot(-light.direction, vNorm);

    vec3 specular = vec3(1,1,1) * light.specular;
    vec3 reflection = reflect(light.direction, vNorm);
    vec3 camera_dir = -normalize(vPos);
    specular *= pow(max(dot(camera_dir, reflection), 0), 32);

    return ambient + diffuse + specular;
}

uniform Material material;
uniform DirectionalLight directional_lights[4];
uniform int directional_light_count = 0;

void main() {
    fCol = vec4(0,0,0,1);
    for(int i = 0; i< directional_light_count; ++i) {
        fCol += vec4(cast_light(material, directional_lights[i]), 0);
    }
}
